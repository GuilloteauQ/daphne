#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modifications Copyright 2023 The DAPHNE Consortium
#
#-------------------------------------------------------------

// Connected components.

// Arguments:
// - inFile ... filename of the adjacency matrix (provide as `--args in=\"foo.csv\"`)
// - outFile ... filename of the result

verbose = true;

t0 = now();

// Read adjacency matrix.
G = readMatrix($inFile);

// Initialization.
maxi = 1000;
// init w/ vertex IDs
c = seq(as.f32(1.0), as.f32(nrow(G)), 1.0);
// use the line below instead of the line above if 4 byte inputs are used (instead of the 8 byte default)
#c = seq(as.f32(1.0), as.f32(nrow(G)), as.f32(1.0));
diff = inf;
iter = 1;

t1 = now();
// Iterative computation of connected components (decisive part).
while(diff > 0.0 && iter <= maxi) {
    ti0 = now();

    u = max(aggMax(G * t(c), 0), c);
    diff = sum(u != c);
    c = u;
    ti1 = now();

    if( verbose ) {
        print("Connected components: #iter = ",0,0); print(iter+",   #diff = "+as.si32(diff), 0, 0);
        print(",   #duration[ms]: ", 0, 0);
        print((ti1 - ti0)*10.0^(-6));
    }

    iter = iter + 1;
}

t2 = now();

// Print elapsed times in nano seconds.
if(verbose) {
    print("load time[s]: ", 0, 0);
    print((t1 - t0)*10.0^(-9)); // initialization
    print("algo time[s]: ", 0, 0);
    print((t2 - t1)*10.0^(-9)); // core algorithm
    print("total time[s]: ", 0, 0);
    print((t2-t0)*10.0^(-9));
}

// Note that, for distributed execution, (t2 - t1) includes reading the input
// files due to some reordering done by the compiler.

// Result output.
//print(c);
write(c, $outFile);
if(verbose) {
    print("Results written to ",0,0);
    print($outFile);
}
