// Connected components.

// Arguments:
// - f ... filename of the adjacency matrix (provide as `--args f=\"foo.csv\"`)

#verbose = true;

#t0 = now();

// Read adjacency matrix.
G = readMatrix($f);

// Initialization.
maxi = 1000;
#c = seq(1, nrow(G), 1l); // init w/ vertex IDs
c = seq(1, nrow(G), 1.0); // init w/ vertex IDs
diff = inf;
iter = 1;

#t1 = now();

// Iterative computation of connected components (decisive part).
while(as.si64(diff > 0.0) && iter <= maxi) {
    u = max(aggMax(G * t(c), 0), c);
    diff = sum(u != c);
    c = u;
    iter = iter + 1;
}

#t2 = now();

// Print elapsed times in nano seconds.
#if( verbose ) {
#    print("\nInitialization [ns]: ", 0, 1); print(t1 - t0, 1, 1); // initialization
#    print("Core algorithm [ns]: ", 0, 1); print(t2 - t1, 1, 1); // core algorithm
#    print("");
#    // Note that, for distributed execution, (t2 - t1) includes reading the input
#    // files due to some reordering done by the compiler.
#}

// Result output.
print(c);